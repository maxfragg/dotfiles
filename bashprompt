#!/bin/bash
##################
##	BASH PROMPT	##
##################

function timer_start {
  timer=${timer:-$SECONDS}
}

function timer_stop {
  timer_show=$(($SECONDS - $timer))
  unset timer
}


## Fancy PWD display function
## The home directory (HOME) is replaced with a ~
## The last pwdmaxlen characters of the PWD are displayed
## Leading partial directory names are striped off
## /home/me/stuff          -> ~/stuff               if USER=me
## /usr/share/big_dir_name -> ../share/big_dir_name if pwdmaxlen=20

#run each time
function bash_prompt_command() {
    # set an error string for the prompt, if applicable
    if [ $? -eq 0 ]; then
        local ERRPROMPT=""
    else
        local ERRPROMPT='->$[$?]\n\a'
    fi

    # echo a bell-character if execution took more than 3 seconds
    timer_stop
    if [ $timer_show -gt 3 ]; then
        #echo -e
        local TIMES='[$timer_show s]\n\a'
    else
        local TIMES=""
    fi

    # How many characters of the $PWD should be kept
    local pwdmaxlen=20
    local newline=""
    [[ `tput cols` -lt 110 ]] && pwdmaxlen=10
    [[ `tput cols` -lt 85 ]] && newline="\n"

    # Indicate that there has been dir truncation
    local trunc_symbol=".."
    local dir=${PWD##*/}
    pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
    NEW_PWD=${PWD/#$HOME/\~}
    local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
    if [ ${pwdoffset} -gt "0" ]
    then
        NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
        NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
    fi
    
    PS1="${TITLEBAR}\
${HC}${TIMES}${ERRPROMPT}\
${HC}[\
${UC}\u\
${HC}${LOC}${HOST_S}\
${UC}${NEW_PWD}\
${HC}]\
$newline${UC}\
\$ ${NONE}"
}

#run once per sheell
function bash_prompt() {

    case $TERM in
     xterm*|rxvt*)
         TITLEBAR='\[\033]0;\u:${NEW_PWD}\007\]'
          ;;
     *)
         TITLEBAR=""
          ;;
    esac
    # NONE="\[\033[0m\]"    # unsets color to term's fg color
    NONE="\[$(tput sgr0)\]"    # unsets color to term's fg color

    # regular colors
    local K="\[$(tput sgr0)\]\[$(tput setaf 0)\]" # black
    local R="\[$(tput sgr0)\]\[$(tput setaf 1)\]"    # red
    local G="\[$(tput sgr0)\]\[$(tput setaf 2)\]"    # green
    local Y="\[$(tput sgr0)\]\[$(tput setaf 3)\]"    # yellow
    local B="\[$(tput sgr0)\]\[$(tput setaf 4)\]"    # blue
    local M="\[$(tput sgr0)\]\[$(tput setaf 5)\]"    # magenta
    local C="\[$(tput sgr0)\]\[$(tput setaf 6)\]"    # cyan
    local W="\[$(tput sgr0)\]\[$(tput setaf 7)\]"    # white
    # emphasized (bolded) colors
    local EMK="\[$(tput bold)\]\[$(tput setaf 0)\]"
    local EMR="\[$(tput bold)\]\[$(tput setaf 1)\]"
    local EMG="\[$(tput bold)\]\[$(tput setaf 2)\]"
    local EMY="\[$(tput bold)\]\[$(tput setaf 3)\]"
    local EMB="\[$(tput bold)\]\[$(tput setaf 4)\]"
    local EMM="\[$(tput bold)\]\[$(tput setaf 5)\]"
    local EMC="\[$(tput bold)\]\[$(tput setaf 6)\]"
    local EMW="\[$(tput bold)\]\[$(tput setaf 7)\]"
    # background colors
    local BGK="\[$(tput setab 0)\]" # black
    local BGR="\[$(tput setab 1)\]"    # red
    local BGG="\[$(tput setab 2)\]"    # green
    local BGY="\[$(tput setab 3)\]"    # yellow
    local BGB="\[$(tput setab 4)\]"    # blue
    local BGM="\[$(tput setab 5)\]"    # magenta
    local BGC="\[$(tput setab 6)\]"    # cyan
    local BGW="\[$(tput setab 7)\]"    # white

    source ~/.bash_config

    # user's color
    UC="$config_prompt_user_color"
    HC="$config_prompt_host_color"
    HOST_S="$config_prompt_hostname"


	# LOCation
	LOC="•"
	[ -n "$SSH_CONNECTION" ] && LOC="✈"

	# root's color
    [ $UID -eq "0" ] && UC=$EMR && HC=$EMW

}

trap 'timer_start' DEBUG
PROMPT_COMMAND=bash_prompt_command
bash_prompt
unset bash_prompt
