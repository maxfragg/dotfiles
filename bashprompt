#!/bin/bash
##################
##	BASH PROMPT	##
##################

function timer_start {
  timer=${timer:-$SECONDS}
}

function timer_stop {
  timer_show=$(($SECONDS - $timer))
  unset timer
}

# Based upon the following gists:
# <https://gist.github.com/henrik/31631>
# <https://gist.github.com/srguiwiz/de87bf6355717f0eede5>
# Modified by me, using ideas from comments on those gists.
#
# License: MIT, unless the authors of those two gists object :)

git_branch() {
    # -- Finds and outputs the current branch name by parsing the list of
    #    all branches
    # -- Current branch is identified by an asterisk at the beginning
    # -- If not in a Git repository, error message goes to /dev/null and
    #    no output is produced
    git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

git_status() {
    # Outputs a series of indicators based on the status of the
    # working directory:
    # ± changes are staged and ready to commit
    # ✗ unstaged changes are present
    # ? untracked files are present
    # ✍ changes have been stashed
    # ➜ local commits need to be pushed to the remote
    local status="$(git status --porcelain 2>/dev/null)"
    local output=''
    [[ -n $(egrep '^[MADRC]' <<<"$status") ]] && output="$output±"
    [[ -n $(egrep '^.[MD]' <<<"$status") ]] && output="$output✗"
    [[ -n $(egrep '^\?\?' <<<"$status") ]] && output="$output?"
    [[ -n $(git stash list) ]] && output="${output}✍"
    [[ -n $(git log --branches --not --remotes) ]] && output="${output}➜"
    [[ -n $output ]] && output="|$output"  # separate from branch name
    echo $output
}

git_color() {
    # Receives output of git_status as argument; produces appropriate color
    # code based on status of working directory:
    # - White if everything is clean
    # - Green if all changes are staged
    # - Red if there are uncommitted changes with nothing staged
    # - Yellow if there are both staged and unstaged changes
    local staged=$([[ $1 =~ \± ]] && echo yes)
    local dirty=$([[ $1 =~ [✗\?] ]] && echo yes)
    if [[ -n $staged ]] && [[ -n $dirty ]]; then
        echo -e '\033[1;33m'  # bold yellow
    elif [[ -n $staged ]]; then
        echo -e '\033[1;32m'  # bold green
    elif [[ -n $dirty ]]; then
        echo -e '\033[1;31m'  # bold red
    else
        echo -e '\033[1;37m'  # bold white
    fi
}

git_prompt() {
    # First, get the branch name...
    local branch=$(git_branch)
    # Empty output? Then we're not in a Git repository, so bypass the rest
    # of the function, producing no output
    if [[ -n $branch ]]; then
        local state=$(git_status)
        local color=$(git_color $state)
        # Now output the actual code to insert the branch and status
        echo -e "\x01$color\x02[$branch$state]\x01\033[00m\x02"  # last bit resets color
    fi
}
## Fancy PWD display function
## The home directory (HOME) is replaced with a ~
## The last pwdmaxlen characters of the PWD are displayed
## Leading partial directory names are striped off
## /home/me/stuff          -> ~/stuff               if USER=me
## /usr/share/big_dir_name -> ../share/big_dir_name if pwdmaxlen=20

#run each time
function bash_prompt_command() {
    # set an error string for the prompt, if applicable
    if [ $? -eq 0 ]; then
        local ERRPROMPT=""
    else
        local ERRPROMPT='➜ $[$?]\n\a'
    fi

    # echo a bell-character if execution took more than 3 seconds
    timer_stop
    if [ $timer_show -gt 3 ]; then
        #echo -e
        local TIMES='[$timer_show s]\n\a'
    else
        local TIMES=""
    fi

    # How many characters of the $PWD should be kept
    local pwdmaxlen=20
    local newline=""
    [[ `tput cols` -lt 110 ]] && pwdmaxlen=10
    [[ `tput cols` -lt 85 ]] && newline="\n"

    # Indicate that there has been dir truncation
    local trunc_symbol="…"
    local dir=${PWD##*/}
    pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
    NEW_PWD=${PWD/#$HOME/\~}
    local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
    if [ ${pwdoffset} -gt "0" ]
    then
        NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
        NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
    fi
    
    PS1="${TITLEBAR}\
${R}${TIMES}${ERRPROMPT}\
${HC}❰\
${UC}\u\
${HC}${LOC}${HOST_S}\
${UC}${NEW_PWD}\
$(git_prompt)\
${HC}❱\
$newline${UC}\
\$ ${NONE}"
}

#run once per shell
function bash_prompt() {

    case $TERM in
     xterm*|rxvt*)
         TITLEBAR='\[\033]0;\u:${NEW_PWD}\007\]'
          ;;
     *)
         TITLEBAR=""
          ;;
    esac

    source ~/.bash_config

    # user's color
    UC="$config_prompt_user_color"
    HC="$config_prompt_host_color"
    HOST_S="$config_prompt_hostname"


	# LOCation
	LOC="•"
	[ -n "$SSH_CONNECTION" ] && LOC="✈"

	# root's color
    [ $UID -eq "0" ] && UC=$EMR && HC=$EMW

}

trap 'timer_start' DEBUG
PROMPT_COMMAND=bash_prompt_command
bash_prompt
unset bash_prompt
