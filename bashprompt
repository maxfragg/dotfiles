#!/bin/bash
##################################
##	BASH PROMPT	##
##################################

function timer_start {
  timer=${timer:-$SECONDS}
}

function timer_stop {
  timer_show=$(($SECONDS - $timer))
  unset timer
}

#git prompt is form: 
# http://www.opinionatedprogrammer.com/2011/01/colorful-bash-prompt-reflecting-git-status/
function _git_prompt() {
    local git_status="`git status -unormal 2>&1`"
    if ! [[ "$git_status" =~ Not\ a\ git\ repo ]]; then
        if [[ "$git_status" =~ nothing\ to\ commit ]]; then
            local ansi=42
        elif [[ "$git_status" =~ nothing\ added\ to\ commit\ but\ untracked\ files\ present ]]; then
            local ansi=43
        else
            local ansi=45
        fi
        if [[ "$git_status" =~ On\ branch\ ([^[:space:]]+) ]]; then
            branch=${BASH_REMATCH[1]}
            test "$branch" != master || branch=' '
        else
            # Detached HEAD.  (branch=HEAD is a faster alternative.)
            branch="(`git describe --all --contains --abbrev=4 HEAD 2> /dev/null ||
                echo HEAD`)"
        fi
        echo -n '\[\e[0;37;'"$ansi"';1m\]'"$branch"'\[\e[0m\]'
    fi
}

## Fancy PWD display function
## The home directory (HOME) is replaced with a ~
## The last pwdmaxlen characters of the PWD are displayed
## Leading partial directory names are striped off
## /home/me/stuff          -> ~/stuff               if USER=me
## /usr/share/big_dir_name -> ../share/big_dir_name if pwdmaxlen=20

#run each time
function bash_prompt_command() {
    # set an error string for the prompt, if applicable
    if [ $? -eq 0 ]; then
        local ERRPROMPT=""
    else
        local ERRPROMPT='->($?)\n\a'
    fi

    # echo a bell-character if execution took more than 3 seconds
    timer_stop
    if [ $timer_show -gt 3 ]; then
        #echo -e
        local TIMES='($timer_show s)\n\a'
    else
        local TIMES=""
    fi

    # How many characters of the $PWD should be kept
    local pwdmaxlen=20
    local newline=""
    [[ `tput cols` -lt 110 ]] && pwdmaxlen=10
    [[ `tput cols` -lt 85 ]] && newline="\n"

    # Indicate that there has been dir truncation
    local trunc_symbol=".."
    local dir=${PWD##*/}
    pwdmaxlen=$(( ( pwdmaxlen < ${#dir} ) ? ${#dir} : pwdmaxlen ))
    NEW_PWD=${PWD/#$HOME/\~}
    local pwdoffset=$(( ${#NEW_PWD} - pwdmaxlen ))
    if [ ${pwdoffset} -gt "0" ]
    then
        NEW_PWD=${NEW_PWD:$pwdoffset:$pwdmaxlen}
        NEW_PWD=${trunc_symbol}/${NEW_PWD#*/}
    fi
    
    [ $GIT = "1" ] && local GITPROMPT_=`_git_prompt`

    PS1="$TITLEBAR${HC}${TIMES}${ERRPROMPT}${UC}\u${W}${HC}$LOC$HOST_S${EMK} ${HC}\${NEW_PWD}${EMK}$GITPROMPT_$newline${UC}\\$ ${NONE}"

}

#run once per sheell
function bash_prompt() {

    case $TERM in
     xterm*|rxvt*)
         TITLEBAR='\[\033]0;\u:${NEW_PWD}\007\]'
          ;;
     *)
         TITLEBAR=""
          ;;
    esac
    NONE="\[\033[0m\]"    # unsets color to term's fg color

    # regular colors
    local K="\[\033[0;30m\]"    # black
    local R="\[\033[0;31m\]"    # red
    local G="\[\033[0;32m\]"    # green
    local Y="\[\033[0;33m\]"    # yellow
    local B="\[\033[0;34m\]"    # blue
    local M="\[\033[0;35m\]"    # magenta
    local C="\[\033[0;36m\]"    # cyan
    local W="\[\033[0;37m\]"    # white
    # emphasized (bolded) colors
    local EMK="\[\033[1;30m\]"
    local EMR="\[\033[1;31m\]"
    local EMG="\[\033[1;32m\]"
    local EMY="\[\033[1;33m\]"
    local EMB="\[\033[1;34m\]"
    local EMM="\[\033[1;35m\]"
    local EMC="\[\033[1;36m\]"
    local EMW="\[\033[1;37m\]"
    # background colors
    local BGK="\[\033[40m\]"
    local BGR="\[\033[41m\]"
    local BGG="\[\033[42m\]"
    local BGY="\[\033[43m\]"
    local BGB="\[\033[44m\]"
    local BGM="\[\033[45m\]"
    local BGC="\[\033[46m\]"
    local BGW="\[\033[47m\]"

    # user's color
    UC=$EMC
    HC=$W
    HOST_S=""
    case "$HOSTNAME" in
    max-x61-ub)
        UC=$R
        HC=$EMY
        HOST_S="x61"
        ;;
    max-x61-f15)
	UC=$Y
	HC=$EMB
	HOST_S="x61"
	;;
    taurus.uberspace.de)
        UC=$Y
        HC=$EMC
        HOST_S="uber"
        ;;
    faui49man*)
        UC=$B
        HC=$EMM
        HOST_S="manlobby"
        ;;
    faui0*)
        UC=$C
        HC=$EMG
        HOST_S="$HOSTNAME"
        ;;
    faui3*)
        UC=$M
        HC=$EMG
        HOST_S=`echo $HOSTNAME | cut -d. -f1`
        ;;
    irene-ThinkPad)
    	UC=$G
    	HC=$EMB
	HOST_S="z61"
	;;
    debian-vm)
    	UC=$R
    	HC=$EMB
    	HOST_S="vm"
    	;;
    squarez)
    	UC=$EMC
    	HC=$EMG
    	HOST_S="squarez"
    	;;
    *)
        ;;
    esac

	# LOCation
	LOC="•"
	[ -n "$SSH_CONNECTION" ] && LOC="✈"

	# root's color
    [ $UID -eq "0" ] && UC=$EMR && HC=$EMW

}
GIT="0"
trap 'timer_start' DEBUG
PROMPT_COMMAND=bash_prompt_command
bash_prompt
unset bash_prompt
